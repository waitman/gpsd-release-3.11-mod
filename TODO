This is the gpsd to-do list.  If you're viewing it with Emacs, try
doing Ctl-C Ctl-t and browsing through the outline headers.  Ctl-C Ctl-a 
will unfold them again.

For contribution guidelines and internals documentation, please see
the "Hacking Guide" on the project website.

The list of bugs exposed by gpsd in other software has moved to
the "Upstream Bugs" page on the project website.

** Bugs in gpsd and its clients:

*** Tracker bugs

See the GPSD bug tracker on the project website, but don't be
surprised if it's empty or very sparse.  Our rate of new defects per
month is quite low.

*** Documentation

Consider merging the calibration draft into the Time Service HOWTO.

*** Time tracking

Our goal is to be independent of the system clock.

**** Compile the GPS week of the build into the build

The obvious place tp put this is in timebase.h. Not too expensive;
will typically cause extra work once per seven days.  The benefit is that
we can compare received week to the compiled in week and if the latter
is less know that a rollover has occurred.

**** Maybe apply wraparound compensation ****

See <http://www.febo.com/pipermail/time-nuts/2013-August/079271.html>

**** Track gpsd's confidence in the GPS time it's seeing

This would increase when we see a leap-second offset or get GPZDA from
the device, decrease when we detect a rollover.  Some devices that are
known to deliver high-quality time (notably u-blox GPSes) would peg the
confidence measure at a high level.  We'd use the confidence level to
control (a) whether gpsd ships to NTP, and (b) how it sets time
uncertainty in output JSON.

*** Client bugs

**** In gpsmon's PPS Offset field

Presently PPS Offset is displayed in direct mode for NMEA, SiRF, and
UBX devices.  Others should probably do likewise, notably the
Motorola Oncore and Garmin drivers.

**** gpsmon driver switching and blocking on error

Hal Murray reports:

   If I run .gpsmon /dev/ttyUSB0

   It starts up in NMEA0183 mode as I expect.
   "i" switches to SiRF, again, as I expect.

   "n" switches the display to NMEA layout, but the header still says SiRF.
   Another "n" now says: Device type has no mode switcher.
   At this point, "i" doesn't do anything.  (no pause either)

The second 'n' is losing information that it shouldn't.

   If I start over and feed it an "f", it starts blinking "Unknown command "f"
   The logging and display update stops.  After I type another character,  it
   clears the blinking error message and stars logging/updating again.

Display update should not stop while this is going on.

*** Time offset debugging in gpsmon ***

Hall Murray:
> The gpsmon logging stuff should include time stamps.
>
> There should be some way for gpsmon to display the time offset that it would
> send to NTP via SHM.  I don't see any obvious empty space on the screen.  If
> nothing else, it could use the PPS space or alternate with the PPS info,
> perhaps via a keyboard command.
>
> Or perhaps a higher level keyboard command to switch into timekeeping
> debugging mode rather than position debugging mode.

**** Speed, mode and rate-changes in client-mode gpsmon.

Are not implemented.  In theory they could be.

**** Speed, mode and rate-changes in client-mode gpsctl.

Baud rate and mode changes work in direct mode but are not
reliable in client mode.

**** Integrate 1PPS into profiling ***

We caw now *really* measure latency from GPS top of second when it has
1PPS.  Add this capability to gpsprof and revise the "Where's the
Latency?" white paper.

*** Low-pwer autoconfiguration in the uBlox driver ***

Anthony Stirk <upuaut@gmail.com> writes on Wed May 21 06:09:00 2014:

    The low power modes are really good on the ublox modules (especially the
    MAX7's) however a word of warning.

    We use the 1 sec cyclic mode on our balloon trackers but if the module
    looses satellites or is jammed out (cheap Chinese cameras do it) the ublox
    modules seem to hang and become unresponsive. To mitigate against this you
    need to put the module back in max performance mode as soon as the
    satellites drops below 4.

    I'm not sure for most applications the low power mode needs to be used at
    all on the newer ublox modules. The values for the MAX-7Q are 22mA (6Q
    50mA) under acquire, tracking (i.e locked and in max performance) current
    at is 17mA  (39mA 6Q) and power saving reduces this to 5mA or less (15mA on
    the 6Q). We've observed the issue on the 6 and 7 series.

A possibility: drop the chip to low-power mode when it can see > 4
sats, revert to normal otherwise.

*** Dispatcher/network issues

**** Reading AISHub data via UDP confuses xgps with short writes

To reproduce, "gpsd -D 5 -N -n udp://192.168.1.3:12346" (only
works inside thyrsus.com) and run xgps. Probably some kind of
packet aggregation issue as it doesn't happen with test logs.

*** Driver issues

**** RTCM3 analysis is incomplete

We can presently decode RTCM3 messages of type 1001-1014, 1029, and
1033.  This is not the complete set. We need more test data with
different types in them, and a copy of the RTCM3 standard at latest
revision (all we have is revision 3).

The support for unpacking RTCM3 sentences in the client library is
limited to 1001, 1002, 1007, 1008, 1009, 1010, 1014, and 1033. There
are some design issues with the baby JSON parser that are going to 
make extending this set difficult.

**** Reporting code for specialized Type 6 and 8 AIS messages is incomplete.

This one is mine and Kurt Schwehr's. Support is currently nearly
complete; the only missing cases are a handful of IMO 236 and IMO 289
message 6 and 8 subtypes - specifically, 6/23, 8/21, 8/22, 8/24, and
8/26.

**** Addressed case of AIS Types 25 and 26 is not handled.

We'd need machinery to shift a byte array 30 bits left...

**** AIS struct needs a 'structured' bit detected by the driver ****

Turns out that dispatching JSON dump on Types 6 and 8 by DAC/FID 
isn't reliable, because sometimes unstructured Type 8s can
false-match with a structured type.  Observed in the wild with 
an unstructured Type 8 misconstrued as an Inland AIS Type 10.
To fix this, the driver needs to store the 'structured' bit in
the AIS structure.  Will require a library bump, but afterwards
some code can be removed from the JSON dumper. 

When this happens, also dump AIS text fields unconditionally (not on
"scaled"). xgps may need changes.

Also, in gps.h, move the tag field to privdata.

** To do:

*** On next API bump ***

In struct gpsdata_t, move the device list out of the union and move
the tag field to private data.

***  Make subframe reports available in the C API.

gpsd now reports subframes when they're available, but the C client
library doesn't yet parse them.  A sample program to dump the SUBFRAME
data would also be useful. Gary Miller has this in his queue.

*** Write advanced features for TNT Revolution device

The baud-rate switcher in the TNT driver needs to be tested.

gpsmon could support a number of TNT configuration commands, including
unit changes. See http://gpsd.googlecode.com/truenorth-reference.pdf
for possibilities.  

Jon Schlueter has one of these on a flock machine, so testing 
shouldn't be difficult.

*** Enable flocktest on the Debian server farm

Debian server farm boxes have a screwy chrooted environment setup.
flocktest needs to be modified to deal with it.

*** Finish gpssim

It's blocked on skyview computation.

*** Complete and test the speed/parity/stopbit methods in the drivers

These are used for the '?DEVICE' command.  All work for 8N1.

**** superstar2: not implemented (driver is unfinished)
**** italk: not implemented (but could be)
**** tsip: speed tested, parity and stop-bit switching not tested
**** sirf: speed tested, parity and stop-bit switching not tested
**** evermore: speed tested, rejects parity/stopbit setting
**** ubx: fully implemented, parity and stop-bit switching not tested
**** zodiac: fully implemented, not tested
**** navcom.c: speed tested, rejects parity/stopbit setting

SiRF, UBX, TSIP, and even Zodiac can support non-8N1 modes; these need
to be tested.

*** Command to ship RTCM corrections to a specified device

At the moment, if a GPS accepts RTCM corrections and they are
available, gpsd ships them to the serial device from which the GPS is
reporting fix data.  Some GPSes have auxiliary ports for RTCM; 
there should be a (privileged) command to redirect RTCM connections.

*** Per-driver restore of changed config settings on exit.

This is a solved problem for generic NMEA, EverMore, TripMate,
EarthMate, TNT, Zodiac, and RTCM104 drivers (if only because they
don't configure any device settings).

The SiRF driver now restores NMEA when necessary.  It also restores
some (but not all) of the things it tweaks in binary mode -- at the
moment, just the Navigation Parameters from message 0x13.  With more
work, we should be able to do a full revert.

The TSIP driver changes its per-cycle sentence inventory and thus 
needs some state-restore logic.  This can be done; the same packet 0x35
we use to configure it can be sent in a no-argument mode to query
the current sentence mix for later restore.

The FV18 changes its per-cycle sentence inventory to include GSAs. It
is possible to query that inventory, though we don't have code to do
it yet.

Garmin devices are a mess.  We reconfigure those heavily, and we
don't know if there's any way to capture their configuration state
before we do it.

The iTrax02 driver sets SYNCMODE to start navigation messages without
checking to see if it's already on, and stops navigation methods on
wrapup.  It also forces the set of sentences issued.  There doesn't
seem to be any way to query these settings.

** Future features (?)

*** Industry-standard format dumping of raw satellite data

It would be useful to be able to report raw GPS data (pseudoranges,
clock, doppler carrier) from any GPS device that can report
pseudoranges etc.  This belongs in the daemon because the device
drivers are already doing the packet-cracking needed to get the data
off the chips.

Several commodity chipsets (ANTARIS, iTrax3, SiRF and Trimble) readily
output enough data to make this a chore, rather than a hard problem.
Probably the best way to do this would be to add support for unscaled
output of pseudoranges in SKY and add clock and doppler carrier
phase. This JSON could then be interpreted by a client program and
dunmped in various standard formats.

Currently the RT-IGS format is looking like the favorite for
implementation; it's a fairly lightweight protocol, flexible enough to
handle all the quantities required, and it is actually in use in
production reference networks. RT-IGS is also a packet-oriented
format, rather than a file-oriented format like RINEX.

*** Support for more survey / professional / up-scale receivers.

Devices such as the Javad JNSCore, Hemisphere Crescent, Septentrio
AsteRx and PolaRx, NovAtel Superstar2 and OEMV, Thales (Magellan
Professional) AC12 and DG14 would all be welcome. Of course, these
are not $50 USB mice...

Local variables:
mode: outline
paragraph-separate: "[ 	]*$"
end:
